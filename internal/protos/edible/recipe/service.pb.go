// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/edible/recipe/service.proto

package erpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("protos/edible/recipe/service.proto", fileDescriptor_37dbe17bd732d5bc) }

var fileDescriptor_37dbe17bd732d5bc = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x4f, 0x4d, 0xc9, 0x4c, 0xca, 0x49, 0xd5, 0x2f, 0x4a, 0x4d, 0xce, 0x2c, 0x48,
	0xd5, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x03, 0x4b, 0x0a, 0x89, 0x42, 0x24, 0xf5,
	0x20, 0x92, 0x7a, 0x50, 0x49, 0x29, 0x65, 0xac, 0x5a, 0x8b, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a,
	0xa1, 0x7a, 0xa5, 0x94, 0x70, 0x28, 0x2a, 0x2c, 0x4d, 0x2d, 0x2e, 0x81, 0xa8, 0x31, 0x2a, 0xe2,
	0xe2, 0x0d, 0x02, 0x8b, 0x07, 0x43, 0x4c, 0x16, 0x4a, 0xe4, 0x62, 0x0d, 0x2e, 0xc9, 0x2f, 0x4a,
	0x15, 0xd2, 0xd4, 0x43, 0xb5, 0x1a, 0xa6, 0x0f, 0xaa, 0x1c, 0xa4, 0x26, 0x08, 0x22, 0x24, 0xa5,
	0x8d, 0xa1, 0x14, 0xea, 0x0e, 0x14, 0xb5, 0x10, 0x31, 0x25, 0x06, 0x27, 0xb6, 0x28, 0x96, 0xd4,
	0xa2, 0x82, 0xa4, 0x24, 0x36, 0xb0, 0x13, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x6e,
	0xeb, 0xed, 0x08, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RecipeServiceClient is the client API for RecipeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecipeServiceClient interface {
	// Unary
	Store(ctx context.Context, in *RecipeStoreRequest, opts ...grpc.CallOption) (*RecipeStoreResponse, error)
}

type recipeServiceClient struct {
	cc *grpc.ClientConn
}

func NewRecipeServiceClient(cc *grpc.ClientConn) RecipeServiceClient {
	return &recipeServiceClient{cc}
}

func (c *recipeServiceClient) Store(ctx context.Context, in *RecipeStoreRequest, opts ...grpc.CallOption) (*RecipeStoreResponse, error) {
	out := new(RecipeStoreResponse)
	err := c.cc.Invoke(ctx, "/edible.recipe.service.RecipeService/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecipeServiceServer is the server API for RecipeService service.
type RecipeServiceServer interface {
	// Unary
	Store(context.Context, *RecipeStoreRequest) (*RecipeStoreResponse, error)
}

// UnimplementedRecipeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRecipeServiceServer struct {
}

func (*UnimplementedRecipeServiceServer) Store(ctx context.Context, req *RecipeStoreRequest) (*RecipeStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}

func RegisterRecipeServiceServer(s *grpc.Server, srv RecipeServiceServer) {
	s.RegisterService(&_RecipeService_serviceDesc, srv)
}

func _RecipeService_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecipeStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServiceServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edible.recipe.service.RecipeService/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServiceServer).Store(ctx, req.(*RecipeStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecipeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edible.recipe.service.RecipeService",
	HandlerType: (*RecipeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _RecipeService_Store_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/edible/recipe/service.proto",
}
