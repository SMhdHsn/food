// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/edible/menu/service.proto

package empb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("protos/edible/menu/service.proto", fileDescriptor_974b0eade821beff) }

var fileDescriptor_974b0eade821beff = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x4f, 0x4d, 0xc9, 0x4c, 0xca, 0x49, 0xd5, 0xcf, 0x4d, 0xcd, 0x2b, 0xd5, 0x2f,
	0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x03, 0x4b, 0x09, 0x09, 0x43, 0xa4, 0xf4, 0x40, 0x52,
	0x7a, 0x50, 0x29, 0x29, 0x45, 0x2c, 0xda, 0x8a, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0xa1, 0xfa,
	0xa4, 0x14, 0xb0, 0x2a, 0x29, 0x2c, 0x4d, 0x2d, 0x2e, 0x81, 0xa8, 0x30, 0x4a, 0xe5, 0xe2, 0xf6,
	0x4d, 0xcd, 0x2b, 0x0d, 0x86, 0x98, 0x29, 0x14, 0xc6, 0xc5, 0xe2, 0x93, 0x59, 0x5c, 0x22, 0xa4,
	0xa2, 0x87, 0x6c, 0x23, 0x4c, 0x0b, 0x48, 0x25, 0x48, 0x3a, 0x08, 0xc2, 0x97, 0x52, 0x43, 0x53,
	0x05, 0xb5, 0x1b, 0xa1, 0x0c, 0x22, 0xa0, 0xc4, 0xe0, 0xc4, 0x16, 0xc5, 0x92, 0x9a, 0x5b, 0x90,
	0x94, 0xc4, 0x06, 0xb6, 0xd5, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x12, 0x5c, 0x51, 0xf3,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MenuServiceClient is the client API for MenuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MenuServiceClient interface {
	// Unary
	List(ctx context.Context, in *MenuListRequest, opts ...grpc.CallOption) (*MenuListResponse, error)
}

type menuServiceClient struct {
	cc *grpc.ClientConn
}

func NewMenuServiceClient(cc *grpc.ClientConn) MenuServiceClient {
	return &menuServiceClient{cc}
}

func (c *menuServiceClient) List(ctx context.Context, in *MenuListRequest, opts ...grpc.CallOption) (*MenuListResponse, error) {
	out := new(MenuListResponse)
	err := c.cc.Invoke(ctx, "/edible.menu.service.MenuService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MenuServiceServer is the server API for MenuService service.
type MenuServiceServer interface {
	// Unary
	List(context.Context, *MenuListRequest) (*MenuListResponse, error)
}

// UnimplementedMenuServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMenuServiceServer struct {
}

func (*UnimplementedMenuServiceServer) List(ctx context.Context, req *MenuListRequest) (*MenuListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterMenuServiceServer(s *grpc.Server, srv MenuServiceServer) {
	s.RegisterService(&_MenuService_serviceDesc, srv)
}

func _MenuService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edible.menu.service.MenuService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).List(ctx, req.(*MenuListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MenuService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edible.menu.service.MenuService",
	HandlerType: (*MenuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _MenuService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/edible/menu/service.proto",
}
