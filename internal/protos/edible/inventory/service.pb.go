// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/edible/inventory/service.proto

package eipb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("protos/edible/inventory/service.proto", fileDescriptor_a783e8028694fe74)
}

var fileDescriptor_a783e8028694fe74 = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x4f, 0x4d, 0xc9, 0x4c, 0xca, 0x49, 0xd5, 0xcf, 0xcc, 0x2b, 0x4b, 0xcd, 0x2b,
	0xc9, 0x2f, 0xaa, 0xd4, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x03, 0xcb, 0x0b, 0x49,
	0x40, 0xe4, 0xf5, 0xe0, 0xf2, 0x7a, 0x50, 0x79, 0x29, 0x35, 0x5c, 0x06, 0x14, 0xa5, 0x16, 0x17,
	0xe4, 0xe7, 0x15, 0x43, 0x4d, 0x90, 0x52, 0xc5, 0xad, 0xae, 0xb0, 0x34, 0xb5, 0xb8, 0x04, 0xa2,
	0xcc, 0xe8, 0x26, 0x13, 0x97, 0x80, 0x27, 0x4c, 0x2e, 0x18, 0x62, 0x87, 0x50, 0x31, 0x17, 0x7b,
	0x50, 0x6a, 0x72, 0x65, 0x72, 0x4e, 0xaa, 0x90, 0xa1, 0x1e, 0x86, 0x4b, 0x60, 0x06, 0xc0, 0xb5,
	0x41, 0xd5, 0x06, 0x41, 0xc4, 0xa5, 0x8c, 0xb1, 0x69, 0x81, 0xba, 0x0d, 0x53, 0x0f, 0x44, 0x42,
	0x89, 0x41, 0x28, 0x9d, 0x8b, 0x39, 0xb4, 0x38, 0x55, 0x48, 0x97, 0x08, 0x0b, 0x43, 0x8b, 0xe1,
	0x96, 0xe9, 0x13, 0x63, 0x19, 0x58, 0x3d, 0xb2, 0x45, 0x4e, 0xa5, 0x95, 0x44, 0x59, 0xe4, 0x54,
	0x5a, 0x49, 0x92, 0x45, 0x60, 0xf5, 0x30, 0x8b, 0x9c, 0xd8, 0xa2, 0x58, 0x52, 0x33, 0x0b, 0x92,
	0x92, 0xd8, 0xc0, 0x41, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x9c, 0xfc, 0xd5, 0x09, 0xfc,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InventoryServiceClient interface {
	// Unary
	Recycle(ctx context.Context, in *InventoryRecycleRequest, opts ...grpc.CallOption) (*InventoryRecycleResponse, error)
	Use(ctx context.Context, in *InventoryUseRequest, opts ...grpc.CallOption) (*InventoryUseResponse, error)
	Buy(ctx context.Context, in *InventoryBuyRequest, opts ...grpc.CallOption) (*InventoryBuyResponse, error)
}

type inventoryServiceClient struct {
	cc *grpc.ClientConn
}

func NewInventoryServiceClient(cc *grpc.ClientConn) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) Recycle(ctx context.Context, in *InventoryRecycleRequest, opts ...grpc.CallOption) (*InventoryRecycleResponse, error) {
	out := new(InventoryRecycleResponse)
	err := c.cc.Invoke(ctx, "/edible.inventory.service.InventoryService/Recycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) Use(ctx context.Context, in *InventoryUseRequest, opts ...grpc.CallOption) (*InventoryUseResponse, error) {
	out := new(InventoryUseResponse)
	err := c.cc.Invoke(ctx, "/edible.inventory.service.InventoryService/Use", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) Buy(ctx context.Context, in *InventoryBuyRequest, opts ...grpc.CallOption) (*InventoryBuyResponse, error) {
	out := new(InventoryBuyResponse)
	err := c.cc.Invoke(ctx, "/edible.inventory.service.InventoryService/Buy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
type InventoryServiceServer interface {
	// Unary
	Recycle(context.Context, *InventoryRecycleRequest) (*InventoryRecycleResponse, error)
	Use(context.Context, *InventoryUseRequest) (*InventoryUseResponse, error)
	Buy(context.Context, *InventoryBuyRequest) (*InventoryBuyResponse, error)
}

// UnimplementedInventoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInventoryServiceServer struct {
}

func (*UnimplementedInventoryServiceServer) Recycle(ctx context.Context, req *InventoryRecycleRequest) (*InventoryRecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recycle not implemented")
}
func (*UnimplementedInventoryServiceServer) Use(ctx context.Context, req *InventoryUseRequest) (*InventoryUseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Use not implemented")
}
func (*UnimplementedInventoryServiceServer) Buy(ctx context.Context, req *InventoryBuyRequest) (*InventoryBuyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Buy not implemented")
}

func RegisterInventoryServiceServer(s *grpc.Server, srv InventoryServiceServer) {
	s.RegisterService(&_InventoryService_serviceDesc, srv)
}

func _InventoryService_Recycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryRecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Recycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edible.inventory.service.InventoryService/Recycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Recycle(ctx, req.(*InventoryRecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_Use_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryUseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Use(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edible.inventory.service.InventoryService/Use",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Use(ctx, req.(*InventoryUseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryBuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edible.inventory.service.InventoryService/Buy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Buy(ctx, req.(*InventoryBuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InventoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edible.inventory.service.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recycle",
			Handler:    _InventoryService_Recycle_Handler,
		},
		{
			MethodName: "Use",
			Handler:    _InventoryService_Use_Handler,
		},
		{
			MethodName: "Buy",
			Handler:    _InventoryService_Buy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/edible/inventory/service.proto",
}
